 求一个有向图的所有强连通分量：
 
 
#include<cstdio>
#include<algorithm> 
#include<string.h>
using namespace std;
struct node {
 int v,next;
}edge[1001];
int DFN[1001],LOW[1001];
int stack[1001],heads[1001],visit[1001],cnt,tot,index;
void add(int x,int y)
{
     edge[++cnt].next=heads[x];
     edge[cnt].v = y;
     heads[x]=cnt;
    return ;
 }
 void tarjan(int x)//代表第几个点在处理。递归的是点。
 {
     DFN[x]=LOW[x]=++tot;// 新进点的初始化。
     stack[++index]=x;//进站
     visit[x]=1;//表示在栈里
    for(int i=heads[x];i!=-1;i=edge[i].next)
     {
         if(!DFN[edge[i].v]) 
         {//如果没访问过
            tarjan(edge[i].v);//往下进行延伸，开始递归
             LOW[x]=min(LOW[x],LOW[edge[i].v]);//递归出来，比较谁是谁的儿子／父亲，就是树的对应关系，涉及到强连通分量子树最小根的事情。
         }
         else if(visit[edge[i].v ]){  //如果访问过，并且还在栈里。
             LOW[x]=min(LOW[x],DFN[edge[i].v]);//比较谁是谁的儿子／父亲。就是链接对应关系
         }
     }
     if(LOW[x]==DFN[x]) //发现是整个强连通分量子树里的最小根。
    {
         do{
            printf("%d ",stack[index]);
             visit[stack[index]]=0;
             index--;
         }while(x!=stack[index+1]);//出栈，并且输出。
         printf("\n");
     }
     return ;
 }
 int main()
 {
     memset(heads,-1,sizeof(heads));
     int n,m;
     scanf("%d%d",&n,&m);
    int x,y;
     for(int i=1;i<=m;i++)
     {
         scanf("%d%d",&x,&y);
        add(x,y);
     }
    for(int i=1;i<=n;i++)
         if(!DFN[i])  tarjan(i);//当这个点没有访问过，就从此点开始。防止图没走完
    return 0;
 }
 
 
 tarjan缩点：
 其实这也是利用了tarjan求强连通分量的方法，对于一些贡献具有传导性，比如友情啊、路径上的权值啊等等。
 思想就是因为强连通分量中的每两个点都是强连通的，可以将一个强连通分量当做一个超级点，而点权按题意来定
 
 来看一道题吧。

poj2186 Popular Cows

告诉你有n头牛，m个崇拜关系，并且崇拜具有传递性，如果a崇拜b，b崇拜c，则a崇拜c，求最后有几头牛被所有牛崇拜。

 

Sample Input
3 3
1 2
2 1
2 3
Sample Output
1

 

显然一个强联通分量内的所有点都是满足条件的，我们可以对整张图进行缩点，然后就简单了。

剩下的所有点都不是强连通的，现在整张图就是一个DAG（有向无环图）

那么就变成一道水题了，因为这是一个有向无环图，不存在所有点的出度都不为零的情况。

所以必然有1个及以上的点出度为零，如果有两个点出度为零，那么这两个点肯定是不相连的，即这两圈牛不是互相崇拜的，

于是此时答案为零，如果有1个点出度为0，那么这个点就是被全体牛崇拜的，

这个点可能是一个强联通分量缩成的超级点，所以应该输出整个强联通分量中点的个数。
代码：

#include<cmath>
#include<cstdio>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

int dfn[10010],low[10010],vis[10010],stack[10010],color[10010],du[10010],cnt[10010];
int n,m,top,sum,deep,tmp,ans;
vector<int> g[10010];

void tarjan(int u)
{
    dfn[u]=low[u]=++deep;
    vis[u]=1;
    stack[++top]=u;
    int sz=g[u].size();
    for(int i=0; i<sz; i++)
    {
        int v=g[u][i];
        if(!dfn[v])
        {
            tarjan(v);
            low[u]=min(low[u],low[v]);
        }
        else
        {
            if(vis[v])
            {
                low[u]=min(low[u],low[v]);
            }
        }
    }
    if(dfn[u]==low[u])
    {
        color[u]=++sum;
        vis[u]=0;
        while(stack[top]!=u)
        {
            color[stack[top]]=sum;
            vis[stack[top--]]=0;
        }
        top--;
    }
}


int main()
{
    while(scanf("%d%d",&n,&m)!=EOF)
    {
        memset(vis,0,sizeof(du));
        memset(vis,0,sizeof(low));
        memset(dfn,0,sizeof(dfn));
        memset(vis,0,sizeof(vis));
        memset(vis,0,sizeof(cnt));
        memset(vis,0,sizeof(color));
        memset(vis,0,sizeof(stack));
        for(int i=1; i<=n; i++)
        {
            g[i].clear();
        }
        for(int i=1; i<=m; i++)
        {
            int from,to;
            scanf("%d%d",&from,&to);
            g[from].push_back(to);
        }
        for(int i=1; i<=n; i++)
        {
            if(!dfn[i])
            {
                tarjan(i);
            }
        }
        for(int i=1; i<=n; i++)
        {
            int sz=g[i].size();
            for(int j=0; j<sz; j++)
            {
                int v=g[i][j];
                if(color[v]!=color[i])
                {
                    du[color[i]]++;
                }
            }
            cnt[color[i]]++;
        }
        for(int i=1; i<=sum; i++)
        {
            if(du[i]==0)
            {
                tmp++;
                ans=cnt[i];
            }
        }
        if(tmp==0)
        {
            printf("0\n");

        }
        else
        {
            if(tmp>1)
            {
                printf("0\n");
            }
            else
            {
                printf("%d\n",ans);
            }
        }
    }
}


割点：无向连通图中，如果删除某点后，图变成不连通，则称该点为割点。

桥：无向连通图中，如果删除某边后，图变成不连通，则称该边为桥。


判断割点方法：

(1) u为树根，且u有多于一个子树。
(2) u不为树根，且存在(u,v)为树枝边(或称父子边，即u为v在搜索树中的父亲)，使得dfn(u)<=low(v)。
   也就是u的子树中的v点无法到达u之前的点，所以u点去掉就是两个连通分支，所以u为割点


判断桥的方法：

断桥的方法：

一条边(u,v)是桥，当且仅当(u,v)为树枝边(即非负边)，且满足dfn(u)<low(v)（前提是其没有重边）。

也就是，u的儿子v之间只有一条边（前提是无重边），且v点只能到v点到不了v点前，所以(u,v)边去掉就是两个连通分支，所以(u,v)为桥

注意：找桥的时候，要注意看有没有重边。有重边，则不是桥。


代码如下：

#include<iostream>
#include<cstdio>
#include<vector>
#include<stack> 
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn=10000+10;
typedef pair<int,int> Edge; 
int index=0;  
vector<bool> vis(maxn);    
vector<int> dfn(maxn),low(maxn),Father(maxn),cutvex;
vector<vector<int> > G(maxn);  
vector<Edge> bridge;
void Tarjan(int u,int father)
{
	dfn[u]=low[u]=++index;
	Father[u]=father;
	vis[u]=true;
	for(int i=0;i<G[u].size();i++)
	{
		int v=G[u][i];
		if(!vis[v]){
			Tarjan(v,u);
			low[u]=min(low[u],low[v]);
		}
		else if(father!=v) //只能由非父子边更新 
			low[u]=min(low[u],dfn[v]);
	}
}
int Count(int n)
{
	int nson=0; //根节点的子树
	Tarjan(1,0);
	for(int v=2;v<=n;v++) //1为根 
	{
		int u=Father[v];
		if(u==1) nson++;
		else if(dfn[u]<=low[v]) cutvex.push_back(u);
	}       //v到不了u之前的点
	if(nson>1) cutvex.push_back(1);
	sort(cutvex.begin(),cutvex.end());
	
	for(int u=1;u<=n;u++)
	{
		int v=Father[u];
		if(v>0&&dfn[v]<low[u]) bridge.push_back(Edge(v,u));
	} 
}
int main()
{
	int n,m;
	cin>>n>>m;
	while(m--){
		int u,v;
		cin>>u>>v;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	Tarjan(1,0);  //联通的
	Count(n);
	for(int i=0;i<cutvex.size();i++)
		cout<<cutvex[i]<<endl;
	for(int i=0;i<bridge.size();i++)
		cout<<bridge[i].first<<','<<bridge[i].second<<endl;
	
	return 0;
} 
int main()
{
	int n,m;
	cin>>n>>m;
	while(m--){
		int u,v;
		cin>>u>>v;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	Tarjan(1,0);  //联通的
	Count(n);
	for(int i=0;i<cutvex.size();i++)
		cout<<cutvex[i]<<endl;
	for(int i=0;i<bridge.size();i++)
		cout<<bridge[i].first<<','<<bridge[i].second<<endl;
	
	return 0;
} 











