二分图判断(染色法)

二分图：
设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的
两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。

染色判断：
二分图判断可分为：连通图判断和非连通图判断
染色思路:
1)初始所有定点未染色
2)随意取出一个未染色的顶点u,把它染成一种颜色(假设为0)。
3)取出与它连接的结点v,如果v未染色，则将v染成和u不同的颜色(假设为1)，如果v已经染色，那么判断u和v颜色
是否相同，相同则表明染色失败，该图不是二分图，结束。
4）遍历所有结点，重复步骤3)
5)连通图只需要一次dfs染色，非连通图则多次dfs染色。

代码：

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 3e5+100;
struct Edge
{
    int to,next;
}edge[maxn<<1];
int n,m;
int head[maxn],tot,color[maxn];
bool ok;
void init(){
    memset(head,-1,sizeof(head));
    memset(color,-1,sizeof(color));
    tot = 0;
}
inline void addedge(int u,int v)
{
    edge[tot].to = v;
    edge[tot].next = head[u];
    head[u] = tot++;
}
void dfs(int u,int col)
{
    color[u] = col;
    for(int i=head[u];~i;i=edge[i].next){
        int v = edge[i].to;
        if(color[v]==color[u])
        {
           ok = false;
           return ;
        }
        if(color[v]==-1)
        {
            dfs(v,col^1);
            if(!ok) return ;
        }
    }
}
int main()
{
    int u,v;
    while(~scanf("%d%d",&n,&m))
    {
        init();
        for(int i=0;i<m;++i)
        {
            scanf("%d%d",&u,&v);
            addedge(u,v);
            addedge(v,u);
        }
        ok = true;
        /*连通图*/
        //dfs(1,0);
        /*非连通图*/
        for(int i=1;i<n;++i)
        {
            if(color[i]==-1)
            {
                dfs(i,0);
                if(!ok)
                    break;
            }
        }
        printf("%s\n",ok?"YES":"NO");
    }
    return 0;
}

讲完理论，来点题目练练手。
例题：
codeforce 1093D
https://codeforces.com/problemset/problem/1093/D

题意:T组样例，每次给出n个顶点m条边的无向图，将整个图的所有顶点填充数字，每个顶点u可填数字1，2，3. 要求m条边每条边连接的两个
顶点(u,v)的填充的数字权值之和为奇数。提问这样的填充方法有多少个。方案可能很大，需要取模998244353。
如果没有则输出0.

思路: m条边每条边上连接两个顶点都满足题意，简单举例对于图：1-2->3->4，顶点集合V={1 3} 填奇数，E={2，4}填偶数或者反过来都可
以满足题意。由此我们想到将原图G划分为两个互不相交顶点集V，E，两个顶点集合中顶点个数分别为x,y.那么若顶点集合V中全部填奇数
（1，2），E中全部填偶数2.便有2^x 种方法。反过来V填偶数，E填奇数便有2^y 种方案，一个二分图便有2^x + 2^y 种方案。
注意题目中可能是非连通图，即存在多个二分子图，那么答案就是对这多个子图方案累乘即可。不懂看代码便知道。

代码：

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 3e5+100;
const ll mod = 998244353;
struct Edge
{
    int to,next;
}edge[maxn<<1];
int n,m,x,y;
int head[maxn],tot,color[maxn];
int pw[maxn];
bool ok;
void init()
{
    memset(head,-1,sizeof(head));
    memset(color,-1,sizeof(color));
    tot = 0;
}
inline void addedge(int u,int v)
{
    edge[tot].to = v;
    edge[tot].next = head[u];
    head[u] = tot++;
}
void dfs(int u,int col)
{
    color[u] = col;
    if(col==1) ++x;
    else ++y;
    for(int i=head[u];~i;i=edge[i].next)
    {
        int v = edge[i].to;
        if(color[v]==color[u])
        {
            ok = false;
            return ;
        }
        if(color[v]==-1)
        {
            dfs(v,col^1);
            if(!ok)
            return ;
        }
    }
}
int main()
{
    int T,u,v;
    pw[0] = 1;
    pw[1] = 2;
    for(int i=2;i<maxn;++i)
    {
        pw[i] = pw[i-1]*2LL%mod;
    }
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d%d",&n,&m);
        for(int i=0;i<=n;++i)
        {
            head[i] = color[i] = -1;
        }
        for(int i=0;i<m;++i)
        {
            scanf("%d%d",&u,&v);
            addedge(u,v);
            addedge(v,u);
        }
        ok = true;
        ll ans = 1;
        for(int i=1;i<=n;++i)
        {
            if(color[i]==-1)
            {
                x = 0;
                y = 0;
                dfs(i,0);
                ans = ans*((pw[x]+pw[y])%mod)%mod;
                if(!ok)
                {
                    break;
                }
            }
        }
        if(ok)
        {
            cout<<ans<<endl;
        }
        else
        {
            puts("0");
        }
    }
    return 0;
}

