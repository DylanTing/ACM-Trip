#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
struct Complex{
    double x,y;
    Complex(double _x = 0.0,double _y = 0.0): x(_x), y(_y) {}
    Complex operator + (const Complex &b)const{
        return Complex(x+b.x,y+b.y);
    }
    Complex operator - (const Complex &b)const{
        return Complex(x-b.x,y-b.y);
    }
    Complex operator * (const Complex &b)const{
        return Complex(x*b.x-y*b.y,x*b.y+y*b.x);
    }
};
//二进制反转，蝴蝶变换
void change(Complex y[],int len){
    int i,j,k;
    for(i=1,j = (len>>1); i<len-1;++i){
        if(i<j) swap(y[i],y[j]);
        k = (len>>1);
        while(j>=k){
            j -= k;
            k >>= 1;
        }
        if(j<k) j+=k;
    }
}

void fft(Complex y[],int len,int on){
    change(y,len);
    for(int h=2;h<=len;h<<=1){
        Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h));
        for(int j=0;j<len; j+=h){
            Complex w(1,0);
            for(int k=j;k<j+(h>>1);++k){
                Complex u = y[k];
                Complex t = w*y[k+(h>>1)];
                y[k] = u + t;
                y[k+(h>>1)] = u - t;
                w = w*wn;
            }
        }
    }
    if(on==-1){ // on = -1 IFFT
        for(int i=0;i<len;++i){
            y[i].x /= len;
        }
    }
}

const int maxn = 50000+100;
int num[maxn<<2];
Complex x1[maxn<<2],x2[maxn<<2]; //多项式四倍数组
char str1[maxn<<1],str2[maxn<<1];

int main(){
    while(~scanf("%s%s",str1,str2)){
        int len1 = strlen(str1);
        int len2 = strlen(str2);
        int len = 1;
        while(len<(len1<<1)||len<(len2<<1)) len <<= 1;
        int i;
        for(i=0;i<len1;++i){
            x1[i] = Complex(str1[len1-i-1]-'0',0.0);
        }
        for(;i<len;++i){
            x1[i] = Complex(0.0,0.0);
        }
        for(i=0;i<len2;++i){
            x2[i] = Complex(str2[len2-i-1]-'0',0.0);
        }
        for(;i<len;++i){
            x2[i] = Complex(0.0,0.0);
        }
        fft(x1,len,1);
        fft(x2,len,1);
        for(i=0;i<len;++i){
            x1[i] = x1[i] * x2[i];
        }
        fft(x1,len,-1); //IFFT
        for(i=0;i<len;++i){
            num[i] = (int)(x1[i].x+0.5); //精度+0.5向下取整
        }
        for(i=0;i<len; ++i){
            num[i+1] += num[i]/10;
            num[i] %= 10;
        }
        len = len1+len2-1;
        while(num[len]<=0&&len>0) --len; //忽略前导零
        for(i=len;i>=0;--i){
            putchar(num[i]+'0');
        }
        putchar('\n');
    }
    return 0;
}



详细解答：https://blog.csdn.net/ggn_2015/article/details/68922404


