E. Two Teams
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output

There are n

students standing in a row. Two coaches are forming two teams — the first coach chooses the first team and the second coach 
chooses the second team.

The i-th student has integer programming skill ai. All programming skills are distinct and between 1 and n, inclusive.

Firstly, the first coach will choose the student with maximum programming skill among all students not taken into any team, and k
closest students to the left of him and k closest students to the right of him (if there are less than k

students to the left or to the right, all of them will be chosen). All students that are chosen leave the row and join the first team. 
Secondly, the second coach will make the same move (but all students chosen by him join the second team). Then again the first coach 
will make such move, and so on. This repeats until the row becomes empty (i. e. the process ends when each student becomes to some team).

Your problem is to determine which students will be taken into the first team and which students will be taken into the second team.

Input

The first line of the input contains two integers n
and k (1≤k≤n≤2⋅105) — the number of students and the value determining the range of chosen students during each move, respectively.

The second line of the input contains n integers a1,a2,…,an (1≤ai≤n), where ai is the programming skill of the i-th student. It is 
guaranteed that all programming skills are distinct.

Output

Print a string of n characters; i-th character should be 1 if i-th student joins the first team, or 2 otherwise.
Examples
Input
Copy

5 2
2 4 5 3 1

Output
Copy

11111

Input
Copy

5 1
2 1 3 5 4

Output
Copy

22111

Input
Copy

7 1
7 2 1 3 5 4 6

Output
Copy

1121122

Input
Copy

5 1
2 4 5 3 1

Output
Copy

21112

Note

In the first example the first coach chooses the student on a position 3, and the row becomes empty (all students join the first team).

In the second example the first coach chooses the student on position 4, and the row becomes [2,1]
(students with programming skills [3,4,5] join the first team). Then the second coach chooses the student on position 1, and the row 
becomes empty (and students with programming skills [1,2]join the second team).

In the third example the first coach chooses the student on position 1, and the row becomes [1,3,5,4,6] 
(students with programming skills [2,7] join the first team). Then the second coach chooses the student on position 5, and the row 
becomes [1,3,5] (students with programming skills [4,6] join the second team). Then the first coach chooses the student on position 3, 
and the row becomes [1] (students with programming skills [3,5] join the first team). And then the second coach chooses the remaining 
student (and the student with programming skill 1joins the second team).

In the fourth example the first coach chooses the student on position 3
, and the row becomes [2,1] (students with programming skills [3,4,5] join the first team). Then the second coach chooses the student 
on position 1, and the row becomes empty (and students with programming skills [1,2] join the second team).

题面地址:http://codeforces.com/contest/1154/problem/E



#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n,k;
    cin>>n>>k;
    set<pair<int,int>> res;
    set<int>  pos;
    vector<int> val;
    vector<int> ans(n,0);

    for(int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        res.insert(make_pair(x,i));
        pos.insert(i);
        val.push_back(x);
    }
    int cur=1;
    while(!pos.empty())
    {
        int pick = res.rbegin()->second;  // set 自动按pair当中第一个元素排序   rbegin() reversebegin 即最后一个元素
        for(int i=1;i<=1+k && !pos.empty();i++)
        {
            auto it = pos.lower_bound(pick); // it迭代器中储存着pick在pos的位置
            if(it == pos.end()) break;
            int t=*it;
            assert(ans[t] == 0);
            ans[t]=cur; 
            pos.erase(t);   
            res.erase(make_pair(val[t],t));
           
            

        }
        for(int i=1;i<=k && !pos.empty();i++)
        {
            auto it = pos.lower_bound(pick);
            if(it == pos.begin()) break;
            --it;
            int t=*it;
            assert(ans[t] == 0);
            ans[t]=cur; 
            pos.erase(t);
            res.erase(make_pair(val[t],t));
           
        }
        cur = 3 - cur;
    }
    for(auto i: ans)
        cout<<i;
    cout<<endl;

}
